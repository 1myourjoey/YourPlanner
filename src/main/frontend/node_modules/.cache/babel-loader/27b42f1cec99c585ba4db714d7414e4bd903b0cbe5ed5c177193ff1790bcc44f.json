{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\YourPlanner\\\\src\\\\main\\\\frontend\\\\src\\\\components\\\\js\\\\LocationBasedList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ListComponent from './ListComponent';\nimport ListHotel from './ListHotel';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LocationBasedList = ({\n  destination\n}) => {\n  _s();\n  const [locations, setLocations] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(destination);\n  const [selectedCity, setSelectedCity] = useState('');\n  const [view, setView] = useState('attractions'); // 'attractions' or 'hotels'\n  const OPEN_KEY = \"5uJ1mFn4tOfEwReTW3dupjd4w2n5kEHO5nciT%2BDVGAVWTl90sysBKbMTIlIxLW5lCPo1VmpZ%2FXggxU84GhG81g%3D%3D\";\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://apis.data.go.kr/B551011/KorService1/areaCode1?serviceKey=${OPEN_KEY}&numOfRows=17&pageNo=1&MobileOS=ETC&MobileApp=AppTest&_type=json`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const json = await response.json();\n        setLocations(json.response.body.items.item);\n\n        // 처음 로드될 때 selectedLocation 설정\n        if (json.response.body.items.item.length > 0 && !destination) {\n          setSelectedLocation(json.response.body.items.item[0].code);\n        }\n      } catch (error) {\n        console.error('Fetch error:', error);\n      }\n    };\n    fetchData();\n  }, [destination]);\n  useEffect(() => {\n    setSelectedLocation(destination);\n  }, [destination]);\n  const handleChange = event => {\n    setSelectedLocation(event.target.value);\n  };\n  const handleCityChange = event => {\n    setSelectedCity(event.target.value);\n  };\n  const handleViewChange = view => {\n    setView(view);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: locations.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedLocation,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\uC9C0\\uC5ED\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), locations.map((location, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: location.code,\n          children: location.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), selectedLocation && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCity,\n          onChange: handleCityChange,\n          children: /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"\\uB3C4\\uC2DC\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleViewChange('attractions'),\n          children: \"\\uCD94\\uCC9C \\uBA85\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleViewChange('hotels'),\n          children: \"\\uC219\\uBC15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), selectedCity && (view === 'attractions' ? /*#__PURE__*/_jsxDEV(ListComponent, {\n          areaCode: selectedCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(ListHotel, {\n          areaCode: selectedCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 19\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationBasedList, \"CK2QdvIINQqoVakp7FG8zaTWh/U=\");\n_c = LocationBasedList;\nexport default LocationBasedList;\nvar _c;\n$RefreshReg$(_c, \"LocationBasedList\");","map":{"version":3,"names":["React","useState","useEffect","ListComponent","ListHotel","jsxDEV","_jsxDEV","Fragment","_Fragment","LocationBasedList","destination","_s","locations","setLocations","selectedLocation","setSelectedLocation","selectedCity","setSelectedCity","view","setView","OPEN_KEY","fetchData","response","fetch","ok","Error","json","body","items","item","length","code","error","console","handleChange","event","target","value","handleCityChange","handleViewChange","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","location","index","name","onClick","areaCode","_c","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/YourPlanner/src/main/frontend/src/components/js/LocationBasedList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport ListComponent from './ListComponent';\r\nimport ListHotel from './ListHotel';\r\n\r\nconst LocationBasedList = ({ destination }) => {\r\n  const [locations, setLocations] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(destination);\r\n  const [selectedCity, setSelectedCity] = useState('');\r\n  const [view, setView] = useState('attractions'); // 'attractions' or 'hotels'\r\n  const OPEN_KEY = \"5uJ1mFn4tOfEwReTW3dupjd4w2n5kEHO5nciT%2BDVGAVWTl90sysBKbMTIlIxLW5lCPo1VmpZ%2FXggxU84GhG81g%3D%3D\";\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://apis.data.go.kr/B551011/KorService1/areaCode1?serviceKey=${OPEN_KEY}&numOfRows=17&pageNo=1&MobileOS=ETC&MobileApp=AppTest&_type=json`\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        const json = await response.json();\r\n        setLocations(json.response.body.items.item);\r\n\r\n        // 처음 로드될 때 selectedLocation 설정\r\n        if (json.response.body.items.item.length > 0 && !destination) {\r\n          setSelectedLocation(json.response.body.items.item[0].code);\r\n        }\r\n      } catch (error) {\r\n        console.error('Fetch error:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [destination]);\r\n\r\n  useEffect(() => {\r\n    setSelectedLocation(destination);\r\n  }, [destination]);\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedLocation(event.target.value);\r\n  };\r\n\r\n  const handleCityChange = (event) => {\r\n    setSelectedCity(event.target.value);\r\n  };\r\n\r\n  const handleViewChange = (view) => {\r\n    setView(view);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {locations.length > 0 ? (\r\n        <>\r\n          <select value={selectedLocation} onChange={handleChange}>\r\n            <option value=\"\">지역을 선택하세요</option>\r\n            {locations.map((location, index) => (\r\n              <option key={index} value={location.code}>\r\n                {location.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          {selectedLocation && (\r\n            <>\r\n              <select value={selectedCity} onChange={handleCityChange}>\r\n                <option value=\"\">도시를 선택하세요</option>\r\n                {/* 여기에 선택된 지역의 도시 목록을 렌더링 */}\r\n              </select>\r\n\r\n              <button onClick={() => handleViewChange('attractions')}>추천 명소</button>\r\n              <button onClick={() => handleViewChange('hotels')}>숙박</button>\r\n\r\n              {selectedCity && (\r\n                view === 'attractions' ? (\r\n                  <ListComponent areaCode={selectedCity} />\r\n                ) : (\r\n                  <ListHotel areaCode={selectedCity} />\r\n                )\r\n              )}\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationBasedList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}