{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\YourPlanner\\\\src\\\\main\\\\frontend\\\\src\\\\components\\\\js\\\\TravelDate.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { useNavigate } from 'react-router-dom';\nimport MapSvg from \"./MapSvg\";\n\n// 날짜를 'yyyy-MM-dd' 형식으로 변환하는 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = date => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\nconst TravelDate = () => {\n  _s();\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [destination, setDestination] = useState('');\n  const [department, setDepartment] = useState('');\n  const navigate = useNavigate();\n  const handleTravel = () => {\n    const formattedStartDate = startDate ? formatDate(startDate) : '';\n    const formattedEndDate = endDate ? formatDate(endDate) : '';\n    const params = new URLSearchParams({\n      startDate: formattedStartDate,\n      endDate: formattedEndDate,\n      destination\n    });\n    navigate(`/details?${params.toString()}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"startDate\",\n      children: \"Start Date:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n      id: \"startDate\",\n      selected: startDate,\n      onChange: date => setStartDate(date),\n      dateFormat: \"yyyy-MM-dd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"endDate\",\n      children: \"End Date:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n      id: \"endDate\",\n      selected: endDate,\n      onChange: date => setEndDate(date),\n      dateFormat: \"yyyy-MM-dd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"destination\",\n      children: \"Destination:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"destination\",\n      value: destination,\n      onChange: e => setDestination(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"destination\",\n      children: \"Department:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"department\",\n      value: Department,\n      onChange: e => setDestination(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTravel,\n      children: \"\\uC5EC\\uD589\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC9C0\\uB3C4\\uC5D0\\uC11C \\uC9C0\\uC5ED\\uC744 \\uC120\\uD0DD\\uD574\\uBCF4\\uC138\\uC694 !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MapSvg, {\n        onCityClick: setDestination\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(TravelDate, \"MsdikRFDypAiTSgL6V6fEOpuusk=\", false, function () {\n  return [useNavigate];\n});\n_c = TravelDate;\nexport default TravelDate;\nvar _c;\n$RefreshReg$(_c, \"TravelDate\");","map":{"version":3,"names":["React","useState","DatePicker","useNavigate","MapSvg","jsxDEV","_jsxDEV","formatDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","TravelDate","_s","startDate","setStartDate","endDate","setEndDate","destination","setDestination","department","setDepartment","navigate","handleTravel","formattedStartDate","formattedEndDate","params","URLSearchParams","toString","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","selected","onChange","dateFormat","type","value","e","target","Department","onClick","onCityClick","_c","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/YourPlanner/src/main/frontend/src/components/js/TravelDate.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MapSvg from \"./MapSvg\";\r\n\r\n// 날짜를 'yyyy-MM-dd' 형식으로 변환하는 함수\r\nconst formatDate = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst TravelDate = () => {\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [destination, setDestination] = useState('');\r\n    const [department, setDepartment] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const handleTravel = () => {\r\n        const formattedStartDate = startDate ? formatDate(startDate) : '';\r\n        const formattedEndDate = endDate ? formatDate(endDate) : '';\r\n        const params = new URLSearchParams({\r\n            startDate: formattedStartDate,\r\n            endDate: formattedEndDate,\r\n            destination\r\n        });\r\n        navigate(`/details?${params.toString()}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <label htmlFor=\"startDate\">Start Date:</label>\r\n            <DatePicker\r\n                id=\"startDate\"\r\n                selected={startDate}\r\n                onChange={date => setStartDate(date)}\r\n                dateFormat=\"yyyy-MM-dd\"\r\n            />\r\n            <label htmlFor=\"endDate\">End Date:</label>\r\n            <DatePicker\r\n                id=\"endDate\"\r\n                selected={endDate}\r\n                onChange={date => setEndDate(date)}\r\n                dateFormat=\"yyyy-MM-dd\"\r\n            />\r\n            <label htmlFor=\"destination\">Destination:</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"destination\"\r\n                value={destination}\r\n                onChange={e => setDestination(e.target.value)}\r\n            />\r\n            <label htmlFor=\"destination\">Department:</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"department\"\r\n                value={Department}\r\n                onChange={e => setDestination(e.target.value)}\r\n            />\r\n            <button onClick={handleTravel}>여행하기</button>\r\n            <div className=\"map-container\">\r\n                <p>지도에서 지역을 선택해보세요 !</p>\r\n                <MapSvg onCityClick={setDestination}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TravelDate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}