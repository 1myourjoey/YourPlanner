{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\YourPlanner\\\\src\\\\main\\\\frontend\\\\src\\\\components\\\\js\\\\SaveTourInfo.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SaveTourInfo = ({\n  startDate,\n  endDate,\n  departure,\n  destination,\n  selectedItems,\n  selectedTrains = {\n    selectedTrains\n  }\n}) => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [saveTitle, setSaveTitle] = useState('');\n  const handleSave = title => {\n    setSaveTitle(title);\n    setIsModalOpen(false);\n    sendSaveRequest(title);\n  };\n  const sendSaveRequest = title => {\n    const userId = sessionStorage.getItem('loginId');\n    const userNo = sessionStorage.getItem('userNo');\n\n    /* 값이 잘 받아지는지 console로 확인 */\n    if (userId) {\n      console.log('Logged in user ID:', userId);\n      console.log('Logged in userNo:', userNo);\n    } else {\n      console.log('No user ID found in session storage.');\n    }\n    console.log('Selected Items:', selectedItems);\n    console.log('Start Date:', startDate);\n    console.log('End Date:', endDate);\n    console.log('Departure:', departure);\n    console.log('Destination:', destination);\n    console.log('selectedTrains:', selectedTrains);\n    console.log('title:', saveTitle);\n\n    /* 컨트롤러로 api값 전송 */\n    fetch('/api/savePlan', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userNo: userNo,\n        startDate: startDate,\n        endDate: endDate,\n        departure: departure,\n        destination: destination,\n        selectedItems: selectedItems,\n        selectedTrains: selectedTrains,\n        saveTitle: title\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    }).then(text => {\n      if (text) {\n        return JSON.parse(text); // 텍스트가 비어있지 않으면 JSON으로 파싱\n      }\n      return {}; // 텍스트가 비어있으면 빈 객체 반환\n    }).then(data => {\n      console.log(data); // 서버에서 받은 응답을 콘솔에 출력\n    }).catch(error => {\n      console.error('Error sending selected items to backend:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsModalOpen(true),\n      children: \"\\uC800\\uC7A5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: () => setIsModalOpen(false),\n      onSave: handleSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n// 모달 컴포넌트\n_s(SaveTourInfo, \"IGpiwI8ExSKo1Lg+VyhDZw+RuKg=\");\n_c = SaveTourInfo;\nconst Modal = ({\n  isOpen,\n  onClose,\n  onSave\n}) => {\n  _s2();\n  const [title, setTitle] = useState('');\n  if (!isOpen) {\n    return null;\n  }\n  const handleSave = () => {\n    onSave(title);\n    alert('저장이 완료되었습니다!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-save\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content-save\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"modal-title\",\n          children: \"\\uD50C\\uB79C \\uC81C\\uBAA9\\uC744 \\uC801\\uC5B4\\uC8FC\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: title,\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"\\uC800\\uC7A5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"\\uB2EB\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s2(Modal, \"MYNoGbxGn41vHCoLeDH6SYxb4UA=\");\n_c2 = Modal;\nexport default SaveTourInfo;\nvar _c, _c2;\n$RefreshReg$(_c, \"SaveTourInfo\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SaveTourInfo","startDate","endDate","departure","destination","selectedItems","selectedTrains","_s","isModalOpen","setIsModalOpen","saveTitle","setSaveTitle","handleSave","title","sendSaveRequest","userId","sessionStorage","getItem","userNo","console","log","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","text","parse","data","catch","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Modal","isOpen","onClose","onSave","_c","_s2","setTitle","alert","className","type","value","onChange","e","target","_c2","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/YourPlanner/src/main/frontend/src/components/js/SaveTourInfo.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SaveTourInfo = ({ startDate, endDate, departure, destination, selectedItems, selectedTrains={selectedTrains} }) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [saveTitle, setSaveTitle] = useState('');\r\n\r\n    const handleSave = (title) => {\r\n        setSaveTitle(title);\r\n        setIsModalOpen(false);\r\n        sendSaveRequest(title);\r\n    };\r\n\r\n    const sendSaveRequest = (title) => {\r\n        const userId = sessionStorage.getItem('loginId');\r\n        const userNo = sessionStorage.getItem(('userNo'));\r\n\r\n        /* 값이 잘 받아지는지 console로 확인 */\r\n        if (userId) {\r\n            console.log('Logged in user ID:', userId);\r\n            console.log('Logged in userNo:', userNo);\r\n        } else {\r\n            console.log('No user ID found in session storage.');\r\n        }\r\n        console.log('Selected Items:', selectedItems);\r\n        console.log('Start Date:', startDate);\r\n        console.log('End Date:', endDate);\r\n        console.log('Departure:', departure);\r\n        console.log('Destination:', destination);\r\n        console.log('selectedTrains:', selectedTrains);\r\n        console.log('title:', saveTitle);\r\n\r\n        /* 컨트롤러로 api값 전송 */\r\n        fetch('/api/savePlan', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                userNo: userNo,\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                departure: departure,\r\n                destination: destination,\r\n                selectedItems:  selectedItems,\r\n                selectedTrains: selectedTrains,\r\n                saveTitle: title\r\n            })\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                return response.text();\r\n            })\r\n            .then(text => {\r\n                if (text) {\r\n                    return JSON.parse(text); // 텍스트가 비어있지 않으면 JSON으로 파싱\r\n                }\r\n                return {}; // 텍스트가 비어있으면 빈 객체 반환\r\n            })\r\n            .then(data => {\r\n                console.log(data); // 서버에서 받은 응답을 콘솔에 출력\r\n            })\r\n            .catch(error => {\r\n                console.error('Error sending selected items to backend:', error);\r\n            });\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={() => setIsModalOpen(true)}>저장</button>\r\n            <Modal\r\n                isOpen={isModalOpen}\r\n                onClose={() => setIsModalOpen(false)}\r\n                onSave={handleSave}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n// 모달 컴포넌트\r\nconst Modal = ({isOpen, onClose, onSave}) => {\r\n    const [title, setTitle] = useState('');\r\n\r\n    if (!isOpen) {\r\n        return null;\r\n    }\r\n\r\n    const handleSave = () => {\r\n        onSave(title);\r\n        alert('저장이 완료되었습니다!');\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-save\">\r\n            <div className=\"modal-content-save\">\r\n                <div>\r\n                    <h4 className=\"modal-title\">플랜 제목을 적어주세요</h4>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <button onClick={handleSave}>저장</button>\r\n                <button onClick={onClose}>닫기</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SaveTourInfo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}