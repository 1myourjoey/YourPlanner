{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:/Users/cy/Documents/GitHub/YourPlanner/src/main/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nexports.LocalWeekYearParser = void 0;\nvar _index = require(\"../../../getWeekYear.js\");\nvar _index2 = require(\"../../../startOfWeek.js\");\nvar _Parser = require(\"../Parser.js\");\nvar _utils = require(\"../utils.js\");\n\n// Local week-numbering year\nclass LocalWeekYearParser extends _Parser.Parser {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"priority\", 130);\n    _defineProperty(this, \"incompatibleTokens\", [\"y\", \"R\", \"u\", \"Q\", \"q\", \"M\", \"L\", \"I\", \"d\", \"D\", \"i\", \"t\", \"T\"]);\n  }\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"YY\"\n    });\n    switch (token) {\n      case \"Y\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);\n      case \"Yo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n      default:\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n    }\n  }\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n  set(date, flags, value, options) {\n    const currentYear = (0, _index.getWeekYear)(date, options);\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n      date.setHours(0, 0, 0, 0);\n      return (0, _index2.startOfWeek)(date, options);\n    }\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return (0, _index2.startOfWeek)(date, options);\n  }\n}\nexports.LocalWeekYearParser = LocalWeekYearParser;","map":{"version":3,"names":["_defineProperty","require","default","exports","LocalWeekYearParser","_index","_index2","_Parser","_utils","Parser","constructor","arguments","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","mapValue","parseNDigits","ordinalNumber","unit","length","validate","_date","value","set","date","flags","options","currentYear","getWeekYear","normalizedTwoDigitYear","normalizeTwoDigitYear","setFullYear","firstWeekContainsDate","setHours","startOfWeek","era"],"sources":["C:/Users/cy/Documents/GitHub/YourPlanner/src/main/frontend/node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js"],"sourcesContent":["\"use strict\";\r\nexports.LocalWeekYearParser = void 0;\r\nvar _index = require(\"../../../getWeekYear.js\");\r\n\r\nvar _index2 = require(\"../../../startOfWeek.js\");\r\nvar _Parser = require(\"../Parser.js\");\r\n\r\nvar _utils = require(\"../utils.js\");\r\n\r\n// Local week-numbering year\r\nclass LocalWeekYearParser extends _Parser.Parser {\r\n  priority = 130;\r\n\r\n  parse(dateString, token, match) {\r\n    const valueCallback = (year) => ({\r\n      year,\r\n      isTwoDigitYear: token === \"YY\",\r\n    });\r\n\r\n    switch (token) {\r\n      case \"Y\":\r\n        return (0, _utils.mapValue)(\r\n          (0, _utils.parseNDigits)(4, dateString),\r\n          valueCallback,\r\n        );\r\n      case \"Yo\":\r\n        return (0, _utils.mapValue)(\r\n          match.ordinalNumber(dateString, {\r\n            unit: \"year\",\r\n          }),\r\n          valueCallback,\r\n        );\r\n      default:\r\n        return (0, _utils.mapValue)(\r\n          (0, _utils.parseNDigits)(token.length, dateString),\r\n          valueCallback,\r\n        );\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value.isTwoDigitYear || value.year > 0;\r\n  }\r\n\r\n  set(date, flags, value, options) {\r\n    const currentYear = (0, _index.getWeekYear)(date, options);\r\n\r\n    if (value.isTwoDigitYear) {\r\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(\r\n        value.year,\r\n        currentYear,\r\n      );\r\n      date.setFullYear(\r\n        normalizedTwoDigitYear,\r\n        0,\r\n        options.firstWeekContainsDate,\r\n      );\r\n      date.setHours(0, 0, 0, 0);\r\n      return (0, _index2.startOfWeek)(date, options);\r\n    }\r\n\r\n    const year =\r\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\r\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\r\n    date.setHours(0, 0, 0, 0);\r\n    return (0, _index2.startOfWeek)(date, options);\r\n  }\r\n\r\n  incompatibleTokens = [\r\n    \"y\",\r\n    \"R\",\r\n    \"u\",\r\n    \"Q\",\r\n    \"q\",\r\n    \"M\",\r\n    \"L\",\r\n    \"I\",\r\n    \"d\",\r\n    \"D\",\r\n    \"i\",\r\n    \"t\",\r\n    \"T\",\r\n  ];\r\n}\r\nexports.LocalWeekYearParser = LocalWeekYearParser;\r\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA,qHAAAC,OAAA;AACbC,OAAO,CAACC,mBAAmB,GAAG,KAAK,CAAC;AACpC,IAAIC,MAAM,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAE/C,IAAIK,OAAO,GAAGL,OAAO,CAAC,yBAAyB,CAAC;AAChD,IAAIM,OAAO,GAAGN,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIO,MAAM,GAAGP,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA,MAAMG,mBAAmB,SAASG,OAAO,CAACE,MAAM,CAAC;EAAAC,YAAA;IAAA,SAAAC,SAAA;IAAAX,eAAA,mBACpC,GAAG;IAAAA,eAAA,6BAyDO,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;EAAA;EArEDY,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,MAAMC,aAAa,GAAIC,IAAI,KAAM;MAC/BA,IAAI;MACJC,cAAc,EAAEJ,KAAK,KAAK;IAC5B,CAAC,CAAC;IAEF,QAAQA,KAAK;MACX,KAAK,GAAG;QACN,OAAO,CAAC,CAAC,EAAEN,MAAM,CAACW,QAAQ,EACxB,CAAC,CAAC,EAAEX,MAAM,CAACY,YAAY,EAAE,CAAC,EAAEP,UAAU,CAAC,EACvCG,aACF,CAAC;MACH,KAAK,IAAI;QACP,OAAO,CAAC,CAAC,EAAER,MAAM,CAACW,QAAQ,EACxBJ,KAAK,CAACM,aAAa,CAACR,UAAU,EAAE;UAC9BS,IAAI,EAAE;QACR,CAAC,CAAC,EACFN,aACF,CAAC;MACH;QACE,OAAO,CAAC,CAAC,EAAER,MAAM,CAACW,QAAQ,EACxB,CAAC,CAAC,EAAEX,MAAM,CAACY,YAAY,EAAEN,KAAK,CAACS,MAAM,EAAEV,UAAU,CAAC,EAClDG,aACF,CAAC;IACL;EACF;EAEAQ,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACrB,OAAOA,KAAK,CAACR,cAAc,IAAIQ,KAAK,CAACT,IAAI,GAAG,CAAC;EAC/C;EAEAU,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEH,KAAK,EAAEI,OAAO,EAAE;IAC/B,MAAMC,WAAW,GAAG,CAAC,CAAC,EAAE1B,MAAM,CAAC2B,WAAW,EAAEJ,IAAI,EAAEE,OAAO,CAAC;IAE1D,IAAIJ,KAAK,CAACR,cAAc,EAAE;MACxB,MAAMe,sBAAsB,GAAG,CAAC,CAAC,EAAEzB,MAAM,CAAC0B,qBAAqB,EAC7DR,KAAK,CAACT,IAAI,EACVc,WACF,CAAC;MACDH,IAAI,CAACO,WAAW,CACdF,sBAAsB,EACtB,CAAC,EACDH,OAAO,CAACM,qBACV,CAAC;MACDR,IAAI,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzB,OAAO,CAAC,CAAC,EAAE/B,OAAO,CAACgC,WAAW,EAAEV,IAAI,EAAEE,OAAO,CAAC;IAChD;IAEA,MAAMb,IAAI,GACR,EAAE,KAAK,IAAIY,KAAK,CAAC,IAAIA,KAAK,CAACU,GAAG,KAAK,CAAC,GAAGb,KAAK,CAACT,IAAI,GAAG,CAAC,GAAGS,KAAK,CAACT,IAAI;IACpEW,IAAI,CAACO,WAAW,CAAClB,IAAI,EAAE,CAAC,EAAEa,OAAO,CAACM,qBAAqB,CAAC;IACxDR,IAAI,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAO,CAAC,CAAC,EAAE/B,OAAO,CAACgC,WAAW,EAAEV,IAAI,EAAEE,OAAO,CAAC;EAChD;AAiBF;AACA3B,OAAO,CAACC,mBAAmB,GAAGA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}