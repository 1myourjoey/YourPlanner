{"ast":null,"code":"import React,{useState,useEffect}from'react';import RecommendedPlaces from\"./RecommendedPlaces\";import{jsx as _jsx}from\"react/jsx-runtime\";const DummyListRestaurant=_ref=>{let{areaCode,sigunguCode,addData,setLoading}=_ref;const[page,setPage]=useState(1);// 페이지 번호 상태\nconst fetchInitialData=async()=>{try{setLoading(true);// 로딩 상태 시작\nconst response=await fetch(\"http://apis.data.go.kr/B551011/KorService1/areaBasedList1?serviceKey=5V%2BytDDcz11Mfxc3tREUmoX6wOvDmA3oIaBkQfhB%2Bo%2B4vBWem3h6eQhKVvJuiJvpVonGtnuRqU6A83YSSBAh8A%3D%3D&pageNo=1&numOfRows=10&MobileApp=AppTest&MobileOS=ETC&arrange=A&areaCode=\".concat(areaCode,\"&sigunguCode=\").concat(sigunguCode,\"&contentTypeId=39\"));if(!response.ok){throw new Error('Network response was not ok');}const responseData=await response.text();// XML 데이터를 텍스트로 가져옴\nconst parser=new DOMParser();const xmlData=parser.parseFromString(responseData,'text/xml');const items=xmlData.getElementsByTagName('item');const extractedData=Array.from(items).map(item=>{var _item$getElementsByTa;return{title:item.getElementsByTagName('title')[0].textContent,addr1:item.getElementsByTagName('addr1')[0].textContent,contenttypeid:item.getElementsByTagName('contenttypeid')[0].textContent,firstimage2:((_item$getElementsByTa=item.getElementsByTagName('firstimage2')[0])===null||_item$getElementsByTa===void 0?void 0:_item$getElementsByTa.textContent)||''};});addData(extractedData);// 초기 데이터 설정\n}catch(error){console.error('Error fetching data:',error);}finally{setLoading(false);// 로딩 상태 종료\n}};const fetchMoreData=async pageNumber=>{try{setLoading(true);// 로딩 상태 시작\nconst response=await fetch(\"http://apis.data.go.kr/B551011/KorService1/areaBasedList1?serviceKey=5V%2BytDDcz11Mfxc3tREUmoX6wOvDmA3oIaBkQfhB%2Bo%2B4vBWem3h6eQhKVvJuiJvpVonGtnuRqU6A83YSSBAh8A%3D%3D&pageNo=\".concat(pageNumber,\"&numOfRows=10&MobileApp=AppTest&MobileOS=ETC&arrange=A&areaCode=\").concat(areaCode,\"&sigunguCode=\").concat(sigunguCode,\"&contentTypeId=39\"));if(!response.ok){throw new Error('Network response was not ok');}const responseData=await response.text();// XML 데이터를 텍스트로 가져옴\nconst parser=new DOMParser();const xmlData=parser.parseFromString(responseData,'text/xml');const items=xmlData.getElementsByTagName('item');const extractedData=Array.from(items).map(item=>{var _item$getElementsByTa2;return{title:item.getElementsByTagName('title')[0].textContent,addr1:item.getElementsByTagName('addr1')[0].textContent,contenttypeid:item.getElementsByTagName('contenttypeid')[0].textContent,firstimage2:((_item$getElementsByTa2=item.getElementsByTagName('firstimage2')[0])===null||_item$getElementsByTa2===void 0?void 0:_item$getElementsByTa2.textContent)||''};});addData(extractedData);// 새로운 데이터를 기존 데이터에 추가\n}catch(error){console.error('Error fetching data:',error);}finally{setLoading(false);// 로딩 상태 종료\n}};useEffect(()=>{fetchInitialData();// 초기 로딩 시 데이터 가져오기\n},[areaCode,sigunguCode]);useEffect(()=>{if(page>1){fetchMoreData(page);// 페이지가 변경될 때만 더 많은 데이터를 가져옴\n}},[page]);const loadMore=()=>{setPage(prevPage=>prevPage+1);// 페이지 번호 증가\n};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(RecommendedPlaces,{})});};export default DummyListRestaurant;","map":{"version":3,"names":["React","useState","useEffect","RecommendedPlaces","jsx","_jsx","DummyListRestaurant","_ref","areaCode","sigunguCode","addData","setLoading","page","setPage","fetchInitialData","response","fetch","concat","ok","Error","responseData","text","parser","DOMParser","xmlData","parseFromString","items","getElementsByTagName","extractedData","Array","from","map","item","_item$getElementsByTa","title","textContent","addr1","contenttypeid","firstimage2","error","console","fetchMoreData","pageNumber","_item$getElementsByTa2","loadMore","prevPage","children"],"sources":["C:/Users/admin/Documents/GitHub/YourPlanner/src/main/frontend/src/components/js/DummyListRestaurant.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport RecommendedPlaces from \"./RecommendedPlaces\";\r\n\r\nconst DummyListRestaurant = ({ areaCode, sigunguCode, addData, setLoading }) => {\r\n    const [page, setPage] = useState(1); // 페이지 번호 상태\r\n    const fetchInitialData = async () => {\r\n        try {\r\n            setLoading(true); // 로딩 상태 시작\r\n            const response = await fetch(`http://apis.data.go.kr/B551011/KorService1/areaBasedList1?serviceKey=5V%2BytDDcz11Mfxc3tREUmoX6wOvDmA3oIaBkQfhB%2Bo%2B4vBWem3h6eQhKVvJuiJvpVonGtnuRqU6A83YSSBAh8A%3D%3D&pageNo=1&numOfRows=10&MobileApp=AppTest&MobileOS=ETC&arrange=A&areaCode=${areaCode}&sigunguCode=${sigunguCode}&contentTypeId=39`);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const responseData = await response.text(); // XML 데이터를 텍스트로 가져옴\r\n            const parser = new DOMParser();\r\n            const xmlData = parser.parseFromString(responseData, 'text/xml');\r\n            const items = xmlData.getElementsByTagName('item');\r\n            const extractedData = Array.from(items).map(item => ({\r\n                title: item.getElementsByTagName('title')[0].textContent,\r\n                addr1: item.getElementsByTagName('addr1')[0].textContent,\r\n                contenttypeid: item.getElementsByTagName('contenttypeid')[0].textContent,\r\n                firstimage2: item.getElementsByTagName('firstimage2')[0]?.textContent || ''\r\n            }));\r\n            addData(extractedData); // 초기 데이터 설정\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        } finally {\r\n            setLoading(false); // 로딩 상태 종료\r\n        }\r\n    };\r\n\r\n    const fetchMoreData = async (pageNumber) => {\r\n        try {\r\n            setLoading(true); // 로딩 상태 시작\r\n            const response = await fetch(`http://apis.data.go.kr/B551011/KorService1/areaBasedList1?serviceKey=5V%2BytDDcz11Mfxc3tREUmoX6wOvDmA3oIaBkQfhB%2Bo%2B4vBWem3h6eQhKVvJuiJvpVonGtnuRqU6A83YSSBAh8A%3D%3D&pageNo=${pageNumber}&numOfRows=10&MobileApp=AppTest&MobileOS=ETC&arrange=A&areaCode=${areaCode}&sigunguCode=${sigunguCode}&contentTypeId=39`);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const responseData = await response.text(); // XML 데이터를 텍스트로 가져옴\r\n            const parser = new DOMParser();\r\n            const xmlData = parser.parseFromString(responseData, 'text/xml');\r\n            const items = xmlData.getElementsByTagName('item');\r\n            const extractedData = Array.from(items).map(item => ({\r\n                title: item.getElementsByTagName('title')[0].textContent,\r\n                addr1: item.getElementsByTagName('addr1')[0].textContent,\r\n                contenttypeid: item.getElementsByTagName('contenttypeid')[0].textContent,\r\n                firstimage2: item.getElementsByTagName('firstimage2')[0]?.textContent || ''\r\n            }));\r\n            addData(extractedData); // 새로운 데이터를 기존 데이터에 추가\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        } finally {\r\n            setLoading(false); // 로딩 상태 종료\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchInitialData(); // 초기 로딩 시 데이터 가져오기\r\n    }, [areaCode, sigunguCode]);\r\n\r\n    useEffect(() => {\r\n        if (page > 1) {\r\n            fetchMoreData(page); // 페이지가 변경될 때만 더 많은 데이터를 가져옴\r\n        }\r\n    }, [page]);\r\n\r\n    const loadMore = () => {\r\n        setPage(prevPage => prevPage + 1); // 페이지 번호 증가\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <RecommendedPlaces />\r\n            {/*<div className=\"load-more-container\">\r\n                <button onClick={loadMore} disabled={loading}>\r\n                    {loading ? '로딩 중...' : '더보기'}\r\n                </button>\r\n            </div>*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DummyListRestaurant;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}